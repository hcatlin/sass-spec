<===> multiple_numerators/input.scss
a {
  b: inspect(1px * 1rad);
}

<===> multiple_numerators/output.css
a {
  b: 1px*rad;
}

<===>
================================================================================
<===> multiple_denominators/input.scss
a {
  b: inspect((1 / 1px / 1rad));
}

<===> multiple_denominators/output.css
a {
  b: 1(px*rad)^-1;
}

<===> multiple_denominators/output-libsass.css
a {
  b: 1/px*rad;
}

<===>
================================================================================
<===> divide_by_multiple_numerators/input.scss
a {
  b: inspect(1 / (1px * 1rad));
}

<===> divide_by_multiple_numerators/output.css
a {
  b: 1(px*rad)^-1;
}

<===> divide_by_multiple_numerators/output-libsass.css
a {
  b: 1/px*rad;
}

<===>
================================================================================
<===> divide_by_multiple_denominators/input.scss
a {
  b: inspect(1 / (1 / 1px / 1rad));
}

<===> divide_by_multiple_denominators/output.css
a {
  b: 1px*rad;
}

<===>
================================================================================
<===> multiplication_cancels_denominator/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number * 1ms);
}

<===> multiplication_cancels_denominator/output.css
a {
  b: 1px*rad/Hz;
}

<===>
================================================================================
<===> multiplication_cancels_denominator_twice/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number * (1ms * 1Hz));
}

<===> multiplication_cancels_denominator_twice/output.css
a {
  b: 1px*rad;
}

<===>
================================================================================
<===> multiplication_cancels_numerator/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number * (1 / 1px));
}

<===> multiplication_cancels_numerator/output.css
a {
  b: 1rad/ms*Hz;
}

<===> multiplication_cancels_numerator/output-libsass.css
a {
  b: 1rad/Hz*ms;
}

<===>
================================================================================
<===> multiplication_cancels_numerator_twice/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number * (1 / 1px / 1rad));
}

<===> multiplication_cancels_numerator_twice/output.css
a {
  b: 1(ms*Hz)^-1;
}

<===> multiplication_cancels_numerator_twice/output-libsass.css
a {
  b: 1/Hz*ms;
}

<===>
================================================================================
<===> multiplication_cancels_both/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number * (1ms / 1px));
}

<===> multiplication_cancels_both/output.css
a {
  b: 1rad/Hz;
}

<===>
================================================================================
<===> division_cancels_denominator/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number / (1 / 1ms));
}

<===> division_cancels_denominator/output.css
a {
  b: 1px*rad/Hz;
}

<===>
================================================================================
<===> division_cancels_denominator_twice/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number / (1 / 1ms / 1Hz));
}

<===> division_cancels_denominator_twice/output.css
a {
  b: 1px*rad;
}

<===>
================================================================================
<===> division_cancels_numerator/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number / 1px);
}

<===> division_cancels_numerator/output.css
a {
  b: 1rad/ms*Hz;
}

<===> division_cancels_numerator/output-libsass.css
a {
  b: 1rad/Hz*ms;
}

<===>
================================================================================
<===> division_cancels_numerator_twice/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number / (1px * 1rad));
}

<===> division_cancels_numerator_twice/output.css
a {
  b: 1(ms*Hz)^-1;
}

<===> division_cancels_numerator_twice/output-libsass.css
a {
  b: 1/Hz*ms;
}

<===>
================================================================================
<===> division_cancels_both/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number / (1px / 1ms));
}

<===> division_cancels_both/output.css
a {
  b: 1rad/Hz;
}

<===>
================================================================================
<===> multiplication_cancels_compatible/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number * 1s);
}

<===> multiplication_cancels_compatible/output.css
a {
  b: 1000px*rad/Hz;
}

<===>
================================================================================
<===> division_cancels_compatible/input.scss
$number: 1px * 1rad / 1ms / 1Hz;
a {
  b: inspect($number / 1in);
}

<===> division_cancels_compatible/output.css
a {
  b: 0.0104166667rad/ms*Hz;
}

<===> division_cancels_compatible/output-libsass.css
a {
  b: 0.0104166667rad/Hz*ms;
}

<===>
================================================================================
<===> multiplication_cancels_unknown/input.scss
// Units cancel even if they're totally unknown to Sass.
$number: 1foo * 1bar / 1baz / 1qux;
a {
  b: inspect($number * 1baz);
}

<===> multiplication_cancels_unknown/output.css
a {
  b: 1foo*bar/qux;
}

<===> multiplication_cancels_unknown/output-libsass.css
a {
  b: 1bar*foo/qux;
}

<===>
================================================================================
<===> division_cancels_unknown/input.scss
// Units cancel even if they're totally unknown to Sass.
$number: 1foo * 1bar / 1baz / 1qux;
a {
  b: inspect($number / 1foo);
}

<===> division_cancels_unknown/output.css
a {
  b: 1bar/baz*qux;
}
