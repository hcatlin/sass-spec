<===> options.yml
---
:end_version: '3.5'
:warning_todo:
- libsass

<===> input.scss
div {
  /* number + whatever */
  font: 3 + 2;
  font: 3 + 50%;
  font: 3 + 12px;
  font: 3 + #111111;
  font: 3 + hello;
  font: 3 + "hello";
  font: 3 + true;
  font: 3 + false;
  font: 3 + not-there(hello);
  font: 3 + un#{quo}te("hello");
  font: 3 + (a, b, c);
  font: 3 + (a b c);
  /* number - whatever */
  font: 3 - 2;
  font: 3 - 50%;
  font: 3 - 12px;
  font: 3 - #111111;
  font: 3 - hello;
  font: 3 - "hello";
  font: 3 - true;
  font: 3 - false;
  font: 3 - not-there(hello);
  font: 3 - un#{quo}te("hello");
  font: 3 - (a, b, c);
  font: 3 - (a b c);
  /* number * whatever */
  font: 3 * 2;
  font: 3 * 50%;
  font: 3 * 12px;
  font: 3 * #111111;
  // // the following commented expressions have invalid operands
  // font: 3 * hello;
  // font: 3 * "hello";
  // font: 3 * true;
  // font: 3 * false;
  // font: 3 * not-there(hello);
  // font: 3 * un#{quo}te("hello");
  // font: 3 * (a, b, c);
  // font: 3 * (a b c);
  /* number / whatever */
  font: 3 / 2;
  font: (3 / 2);
  font: 4 * 3 / 2;
  font: 3 / 2 * 4;
  // font: (100 / 50%); // results in mixed unit
  // font: (3 / 12px); // results in mixed unit
  font: (3 / #111111);
  font: (3 / hello);
  font: (3 / "hello");
  font: (3 / true);
  font: (3 / false);
  font: (3 / not-there(hello));
  font: (3 / un#{quo}te("hello"));
  font: (3 / (a, b, c));
  font: (3 / (a b c));
  /* number % whatever */
  font: 3 % 2;
//  font: 3 % 50%; // units not allowed
//  font: 3 % 12px;
//  font: 3 % #111111; // invalid operand
//  font: 3 % hello;
//  font: 3 % "hello";
//  font: 3 % true;
//  font: 3 % false;
//  font: 3 % not-there(hello);
//  font: 3 % un#{quo}te("hello");
//  font: 3 % (a, b, c);
//  font: 3 % (a b c);
  /* */
  /* percentage + whatever */
  font: 50% + 3;
  font: 50% + 100%;
//  font : 50% + 10px; // incompatible units
//  font: 50% + #111111; // invalid operands
  font: 50% + hello;
  font: 50% + "hello";
  font: 50% + undefined(hello);
  font: 50% + un#{quo}te("hello");
  font: 50% + (a, b, c);
  font: 50% + (a b c);
  /* percentage - whatever */
  font: 50% - 3;
  font: 50% - 100%;
//  font: 50% - 10px; // incompatible units
  font: 50% - #111111; // invalid operands
  font: 50% - hello;
  font: 50% - "hello";
  font: 50% - undefined(hello);
  font: 50% - un#{quo}te("hello");
  font: 50% - (a, b, c);
  font: 50% - (a b c);
  /* percentage * whatever */
  font: 50% * 3;
//  font: 50% * 100%; // results in squared units
//  font: 50% * 10px; // results in mixed units
//  font: 50% * #111111; // invalid operands
//  font: 50% * hello;
//  font: 50% * "hello";
//  font: 50% * undefined(hello);
//  font: 50% * un#{quo}te("hello");
//  font: 50% * (a, b, c);
//  font: 50% * (a b c);
  /* percentage / whatever */
  font: (50% / 3);
  font: (50% / 100%);
//  font: (50% / 10px); // incompatible units
  font: (50% / #111111); // invalid operands
  font: (50% / hello);
  font: 50%/"hello";
  font: (50% / undefined(hello));
  font: 50% / un#{quo}te("hello");
  font: 50% / (a, b, c);
  font: 50% / (a b c);
  /* percentage % whatever */
  /* percentage / whatever */
  font: 50% % 3;
//  font: 50% % 100%; // not allowed to mod by units
//  font: 50% % 10px;
//  font: 50% % #111111; // invalid operands
//  font: 50% % hello;
//  font: 50% % "hello";
//  font: 50% % undefined(hello);
//  font: 50% % un#{quo}te("hello");
//  font: 50% % (a, b, c);
//  font: 50% % (a b c);
//  font: 20px % 6px;
  font: type-of(3 + (a b c));
  blah: (20/#abc);
  blah: type-of(3 + true);
  blah: (3 + true);
  blah: (true + 3);
  blah: (true - 5);

//  blah: 20px % 6px;

//  blah: 20 % 6px;
 // blah: 20px % 6hz;
//  blee: rgba(4,4,4,.3) % rgba(1,1,1,.3);
  blah: (#abc / #111);
  foo: type-of((1 2 3) + (a b c));
  foo: (1 2 3) + (a b c);
  foo: (2px + 3px)*4em/2px;
  foo: 1cm*1in/1cm;
}
<===> output.css
div {
  /* number + whatever */
  font: 5;
  font: 53%;
  font: 15px;
  font: #141414;
  font: 3hello;
  font: "3hello";
  font: 3true;
  font: 3false;
  font: 3not-there(hello);
  font: 3unquote("hello");
  font: 3a, b, c;
  font: 3a b c;
  /* number - whatever */
  font: 1;
  font: -47%;
  font: -9px;
  font: 3-#111111;
  font: 3-hello;
  font: 3-"hello";
  font: 3-true;
  font: 3-false;
  font: 3-not-there(hello);
  font: 3-unquote("hello");
  font: 3-a, b, c;
  font: 3-a b c;
  /* number * whatever */
  font: 6;
  font: 150%;
  font: 36px;
  font: #333333;
  /* number / whatever */
  font: 3 / 2;
  font: 1.5;
  font: 6;
  font: 6;
  font: 3/#111111;
  font: 3/hello;
  font: 3/"hello";
  font: 3/true;
  font: 3/false;
  font: 3/not-there(hello);
  font: 3/unquote("hello");
  font: 3/a, b, c;
  font: 3/a b c;
  /* number % whatever */
  font: 1;
  /* */
  /* percentage + whatever */
  font: 53%;
  font: 150%;
  font: 50%hello;
  font: "50%hello";
  font: 50%undefined(hello);
  font: 50%unquote("hello");
  font: 50%a, b, c;
  font: 50%a b c;
  /* percentage - whatever */
  font: 47%;
  font: -50%;
  font: 50%-#111111;
  font: 50%-hello;
  font: 50%-"hello";
  font: 50%-undefined(hello);
  font: 50%-unquote("hello");
  font: 50%-a, b, c;
  font: 50%-a b c;
  /* percentage * whatever */
  font: 150%;
  /* percentage / whatever */
  font: 16.6666666667%;
  font: 0.5;
  font: 50%/#111111;
  font: 50%/hello;
  font: 50%/"hello";
  font: 50%/undefined(hello);
  font: 50%/unquote("hello");
  font: 50%/a, b, c;
  font: 50%/a b c;
  /* percentage % whatever */
  /* percentage / whatever */
  font: 2%;
  font: string;
  blah: 20/#abc;
  blah: string;
  blah: 3true;
  blah: true3;
  blah: true-5;
  blah: #0a0b0c;
  foo: string;
  foo: 1 2 3a b c;
  foo: 10em;
  foo: 1in;
}

<===> warning
DEPRECATION WARNING on line 12 of /sass/spec/libsass/arithmetic/input.scss:
#{} interpolation near operators will be simplified in a future version of Sass.
To preserve the current behavior, use quotes:

  unquote("#{3 + un}quo#{te("hello")}")

You can use the sass-convert command to automatically fix most cases.

DEPRECATION WARNING on line 25 of /sass/spec/libsass/arithmetic/input.scss:
#{} interpolation near operators will be simplified in a future version of Sass.
To preserve the current behavior, use quotes:

  unquote("#{3 - un}quo#{te("hello")}")

You can use the sass-convert command to automatically fix most cases.

DEPRECATION WARNING on line 55 of /sass/spec/libsass/arithmetic/input.scss:
#{} interpolation near operators will be simplified in a future version of Sass.
To preserve the current behavior, use quotes:

  unquote("#{3 / un}quo#{te("hello")}")

You can use the sass-convert command to automatically fix most cases.

DEPRECATION WARNING on line 80 of /sass/spec/libsass/arithmetic/input.scss:
#{} interpolation near operators will be simplified in a future version of Sass.
To preserve the current behavior, use quotes:

  unquote("#{50% + un}quo#{te("hello")}")

You can use the sass-convert command to automatically fix most cases.

DEPRECATION WARNING on line 91 of /sass/spec/libsass/arithmetic/input.scss:
#{} interpolation near operators will be simplified in a future version of Sass.
To preserve the current behavior, use quotes:

  unquote("#{50% - un}quo#{te("hello")}")

You can use the sass-convert command to automatically fix most cases.

DEPRECATION WARNING on line 113 of /sass/spec/libsass/arithmetic/input.scss:
#{} interpolation near operators will be simplified in a future version of Sass.
To preserve the current behavior, use quotes:

  unquote("#{50% / un}quo#{te("hello")}")

You can use the sass-convert command to automatically fix most cases.

DEPRECATION WARNING on line 6 of /sass/spec/libsass/arithmetic/input.scss:
The operation `3 plus #111111` is deprecated and will be an error in future versions.
Consider using Sass's color functions instead.
https://sass-lang.com/documentation/Sass/Script/Functions.html#other_color_functions

DEPRECATION WARNING on line 19 of /sass/spec/libsass/arithmetic/input.scss:
The operation `3 minus #111111` is deprecated and will be an error in future versions.
Consider using Sass's color functions instead.
https://sass-lang.com/documentation/Sass/Script/Functions.html#other_color_functions

DEPRECATION WARNING on line 32 of /sass/spec/libsass/arithmetic/input.scss:
The operation `3 times #111111` is deprecated and will be an error in future versions.
Consider using Sass's color functions instead.
https://sass-lang.com/documentation/Sass/Script/Functions.html#other_color_functions

DEPRECATION WARNING on line 49 of /sass/spec/libsass/arithmetic/input.scss:
The operation `3 div #111111` is deprecated and will be an error in future versions.
Consider using Sass's color functions instead.
https://sass-lang.com/documentation/Sass/Script/Functions.html#other_color_functions

DEPRECATION WARNING on line 87 of /sass/spec/libsass/arithmetic/input.scss:
The operation `50% minus #111111` is deprecated and will be an error in future versions.
Consider using Sass's color functions instead.
https://sass-lang.com/documentation/Sass/Script/Functions.html#other_color_functions

DEPRECATION WARNING on line 109 of /sass/spec/libsass/arithmetic/input.scss:
The operation `50% div #111111` is deprecated and will be an error in future versions.
Consider using Sass's color functions instead.
https://sass-lang.com/documentation/Sass/Script/Functions.html#other_color_functions

DEPRECATION WARNING on line 130 of /sass/spec/libsass/arithmetic/input.scss:
The operation `20 div #abc` is deprecated and will be an error in future versions.
Consider using Sass's color functions instead.
https://sass-lang.com/documentation/Sass/Script/Functions.html#other_color_functions

DEPRECATION WARNING on line 141 of /sass/spec/libsass/arithmetic/input.scss:
The operation `#abc div #111` is deprecated and will be an error in future versions.
Consider using Sass's color functions instead.
https://sass-lang.com/documentation/Sass/Script/Functions.html#other_color_functions
