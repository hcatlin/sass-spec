<===> global/input.scss
@mixin global-mixin() {}

a {b: mixin-exists(global-mixin)}

<===> global/output.css
a {
  b: true;
}

<===>
================================================================================
<===> local/input.scss
a {
  @mixin local-mixin() {}
  b: mixin-exists(local-mixin);
}

<===> local/output.css
a {
  b: true;
}

<===>
================================================================================
<===> dash_insensitive/input.scss
@mixin global-mixin() {}

a {b: mixin-exists(global_mixin)}

<===> dash_insensitive/output.css
a {
  b: true;
}

<===>
================================================================================
<===> through_import/input.scss
@import "other";
a {b: mixin-exists(global-mixin)}

<===> through_import/other.scss
@mixin global-mixin() {}

<===> through_import/output.css
a {
  b: true;
}

<===>
================================================================================
<===> through_use/options.yml
---
:todo:
- libsass # sass/libsass#2807

<===> through_use/input.scss
@use "other" as *;
a {b: mixin-exists(global-mixin)}

<===> through_use/other.scss
@mixin global-mixin() {}

<===> through_use/output.css
a {
  b: true;
}

<===>
================================================================================
<===> through_forward/options.yml
---
:todo:
- libsass # sass/libsass#2807

<===>
================================================================================
<===> through_forward/bare/input.scss
@use "midstream" as *;
a {b: mixin-exists(c)}

<===> through_forward/bare/_midstream.scss
@forward "upstream";

<===> through_forward/bare/_upstream.scss
@mixin c() {}

<===> through_forward/bare/output.css
a {
  b: true;
}

<===>
================================================================================
<===> through_forward/as/input.scss
@use "midstream" as *;
a {
  with-prefix: mixin-exists(b-c);
  without-prefix: mixin-exists(c);
}

<===> through_forward/as/_midstream.scss
@forward "upstream" as b-*;

<===> through_forward/as/_upstream.scss
@mixin c() {}

<===> through_forward/as/output.css
a {
  with-prefix: true;
  without-prefix: false;
}

<===>
================================================================================
<===> through_forward/show/input.scss
@use "midstream" as *;
a {
  shown: mixin-exists(b);
  not-shown: mixin-exists(c);
}

<===> through_forward/show/_midstream.scss
@forward "upstream" show b;

<===> through_forward/show/_upstream.scss
@mixin b() {}
@mixin c() {}

<===> through_forward/show/output.css
a {
  shown: true;
  not-shown: false;
}

<===>
================================================================================
<===> through_forward/hide/input.scss
@use "midstream" as *;
a {
  hidden: mixin-exists(b);
  not-hidden: mixin-exists(c);
}

<===> through_forward/hide/_midstream.scss
@forward "upstream" hide b;

<===> through_forward/hide/_upstream.scss
@mixin b() {}
@mixin c() {}

<===> through_forward/hide/output.css
a {
  hidden: false;
  not-hidden: true;
}

<===>
================================================================================
<===> non_existent/input.scss
a {
  b: mixin-exists(non-existent);
}

<===> non_existent/output.css
a {
  b: false;
}

<===>
================================================================================
<===> keyword/input.scss
a {b: mixin-exists($name: foo)}

<===> keyword/output.css
a {
  b: false;
}

<===>
================================================================================
<===> error/argument/type/input.scss
a {b: mixin-exists(12px)}

<===> error/argument/type/error
Error: $name: 12px is not a string.
  ,
1 | a {b: mixin-exists(12px)}
  |       ^^^^^^^^^^^^^^^^^^
  '
  input.scss 1:7  root stylesheet

<===> error/argument/type/error-libsass
Error: argument `$name` of `mixin-exists($name)` must be a string
        on line 1:7 of input.scss, in function `mixin-exists`
        from line 1:7 of input.scss
>> a {b: mixin-exists(12px)}

   ------^

<===>
================================================================================
<===> error/argument/too_few/input.scss
a {b: mixin-exists()}

<===> error/argument/too_few/error
Error: Missing argument $name.
  ,
1 | a {b: mixin-exists()}
  |       ^^^^^^^^^^^^^^
  '
  input.scss 1:7  root stylesheet

<===> error/argument/too_few/error-libsass
Error: Function mixin-exists is missing argument $name.
        on line 1 of input.scss
>> a {b: mixin-exists()}

   ------^

<===>
================================================================================
<===> error/argument/too_many/input.scss
a {b: mixin-exists(foo, bar)}

<===> error/argument/too_many/error
Error: Only 1 argument allowed, but 2 were passed.
  ,
1 | a {b: mixin-exists(foo, bar)}
  |       ^^^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 1:7  root stylesheet

<===> error/argument/too_many/error-libsass
Error: wrong number of arguments (2 for 1) for `mixin-exists'
        on line 1:7 of input.scss
>> a {b: mixin-exists(foo, bar)}

   ------^

<===>
================================================================================
<===> conflict/options.yml
---
:todo:
- libsass # sass/libsass#2807

<===> conflict/input.scss
@use "other1" as *;
@use "other2" as *;

a {b: mixin-exists(member)}

<===> conflict/other1.scss
@mixin member() {}

<===> conflict/other2.scss
@mixin member() {}

<===> conflict/error
Error: Multiple global modules have a mixin named "member".
  ,
4 | a {b: mixin-exists(member)}
  |       ^^^^^^^^^^^^^^^^^^^^
  '
  input.scss 4:7  root stylesheet
