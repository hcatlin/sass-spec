<===> namespaced/default/variable_use/input.scss
@use "other";

a {b: other.$member}

<===> namespaced/default/variable_use/other.scss
$member: value;

<===> namespaced/default/variable_use/output.css
a {
  b: value;
}

<===>
================================================================================
<===> namespaced/default/variable_assignment/top_level/input.scss
@use "other";

other.$member: new value;

a {b: other.get-member()};

<===> namespaced/default/variable_assignment/top_level/other.scss
$member: value;

@function get-member() {@return $member}

<===> namespaced/default/variable_assignment/top_level/output.css
a {
  b: new value;
}

<===>
================================================================================
<===> namespaced/default/variable_assignment/nested/input.scss
@use "other";

a {
  // Namespaced assignments always assign to the other module's variable, even
  // if they're nested in a block scope.
  other.$member: new value;

  b: other.get-member();
}

<===> namespaced/default/variable_assignment/nested/other.scss
$member: value;

@function get-member() {@return $member}

<===> namespaced/default/variable_assignment/nested/output.css
a {
  b: new value;
}

<===>
================================================================================
<===> namespaced/default/variable_assignment/in_function/input.scss
@use "other";

@function a() {
  // Test assignments within a function specially, because functions disallow
  // property declarations and variable assignments need to be disambiguated
  // with those.
  other.$member: new value;

  @return other.get-member();
}

b {c: a()}

<===> namespaced/default/variable_assignment/in_function/other.scss
$member: value;

@function get-member() {@return $member}

<===> namespaced/default/variable_assignment/in_function/output.css
b {
  c: new value;
}

<===>
================================================================================
<===> namespaced/default/variable_assignment/in_declaration/input.scss
@use "other";

a {
  b: {
    // Test assignments within a declaration specially, because declarations
    // disallow style rules and variable assignments need to be disambiguated
    // with those.
    other.$member: new value;

    c: other.get-member();
  }
}

<===> namespaced/default/variable_assignment/in_declaration/other.scss
$member: value;

@function get-member() {@return $member}

<===> namespaced/default/variable_assignment/in_declaration/output.css
a {
  b-c: new value;
}

<===>
================================================================================
<===> namespaced/default/function/input.scss
@use "other";

a {b: other.member()}

<===> namespaced/default/function/other.scss
@function member() {@return value}

<===> namespaced/default/function/output.css
a {
  b: value;
}

<===>
================================================================================
<===> namespaced/default/mixin/input.scss
@use "other";

@include other.member;

<===> namespaced/default/mixin/other.scss
@mixin member() {a {b: c}}

<===> namespaced/default/mixin/output.css
a {
  b: c;
}

<===>
================================================================================
<===> namespaced/explicit/variable_use/input.scss
@use "other" as o;

a {b: o.$member}

<===> namespaced/explicit/variable_use/other.scss
$member: value;

<===> namespaced/explicit/variable_use/output.css
a {
  b: value;
}

<===>
================================================================================
<===> namespaced/explicit/variable_assignment/input.scss
@use "other" as o;

o.$member: new value;

a {b: o.get-member()}

<===> namespaced/explicit/variable_assignment/other.scss
$member: value;

@function get-member() {@return $member}

<===> namespaced/explicit/variable_assignment/output.css
a {
  b: new value;
}

<===>
================================================================================
<===> namespaced/explicit/function/input.scss
@use "other" as o;

a {b: o.member()}

<===> namespaced/explicit/function/other.scss
@function member() {@return value}

<===> namespaced/explicit/function/output.css
a {
  b: value;
}

<===>
================================================================================
<===> namespaced/explicit/mixin/input.scss
@use "other" as o;

@include o.member;

<===> namespaced/explicit/mixin/other.scss
@mixin member() {a {b: c}}

<===> namespaced/explicit/mixin/output.css
a {
  b: c;
}

<===>
================================================================================
<===> global/variable_use/input.scss
@use "other" as *;

a {b: $member}

<===> global/variable_use/other.scss
$member: value;

<===> global/variable_use/output.css
a {
  b: value;
}

<===>
================================================================================
<===> global/variable_assignment/top_level/input.scss
@use "other" as *;

$member: new value;

a {b: get-member()}

<===> global/variable_assignment/top_level/other.scss
$member: value;

@function get-member() {@return $member}

<===> global/variable_assignment/top_level/output.css
a {
  b: new value;
}

<===>
================================================================================
<===> global/variable_assignment/nested/local/input.scss
@use "other" as *;

a {
  // A nested variable assignment that doesn't have a namespace and isn't
  // !global creates a new local variable rather than assigning to a variable
  // imported from a module.
  $member: new value;

  b: get-member();
}

<===> global/variable_assignment/nested/local/other.scss
$member: value;

@function get-member() {@return $member}

<===> global/variable_assignment/nested/local/output.css
a {
  b: value;
}

<===>
================================================================================
<===> global/variable_assignment/nested/global/input.scss
@use "other" as *;

a {
  // A nested variable assignment that doesn't have a namespace but is !global
  // assigns to a global module's variable if one exists.
  $member: new value !global;

  b: get-member();
}

<===> global/variable_assignment/nested/global/other.scss
$member: value;

@function get-member() {@return $member}

<===> global/variable_assignment/nested/global/output.css
a {
  b: new value;
}

<===>
================================================================================
<===> global/function/input.scss
@use "other" as *;

a {b: member()}

<===> global/function/other.scss
@function member() {@return value}

<===> global/function/output.css
a {
  b: value;
}

<===>
================================================================================
<===> global/mixin/input.scss
@use "other" as *;

@include member;

<===> global/mixin/other.scss
@mixin member() {a {b: c}}

<===> global/mixin/output.css
a {
  b: c;
}

<===>
================================================================================
<===> use_to_import/variable_use/input.scss
@use "midstream";

a {b: midstream.$member}

<===> use_to_import/variable_use/midstream.scss
@import "upstream";

<===> use_to_import/variable_use/upstream.scss
$member: value;

<===> use_to_import/variable_use/output.css
a {
  b: value;
}

<===>
================================================================================
<===> use_to_import/variable_assignment/input.scss
@use "midstream";

midstream.$member: new value;

a {b: midstream.get-member()}

<===> use_to_import/variable_assignment/midstream.scss
@import "upstream";

<===> use_to_import/variable_assignment/upstream.scss
$member: value;

@function get-member() {@return $member}

<===> use_to_import/variable_assignment/output.css
a {
  b: new value;
}

<===>
================================================================================
<===> use_to_import/function/input.scss
@use "midstream";

a {b: midstream.member()}

<===> use_to_import/function/midstream.scss
@import "upstream";

<===> use_to_import/function/upstream.scss
@function member() {@return value}

<===> use_to_import/function/output.css
a {
  b: value;
}

<===>
================================================================================
<===> use_to_import/mixin/input.scss
@use "midstream";

@include midstream.member;

<===> use_to_import/mixin/midstream.scss
@import "upstream";

<===> use_to_import/mixin/upstream.scss
@mixin member() {a {b: c}}

<===> use_to_import/mixin/output.css
a {
  b: c;
}

<===>
================================================================================
<===> default_namespace/basename/input.scss
// Only the basename of the URL is used for the namespace. Previous components
// are discarded.
@use "foo/bar/../baz/qux/other";

a {b: other.$variable}

<===> default_namespace/basename/foo/baz/qux/other.scss
$variable: value;

<===> default_namespace/basename/output.css
a {
  b: value;
}

<===>
================================================================================
<===> default_namespace/without_extensions/input.scss
// All extensions on the URL are discarded before determining the namespace.
@use "other.foo.bar.baz.scss";

a {b: other.$variable}

<===> default_namespace/without_extensions/other.foo.bar.baz.scss
$variable: value;

<===> default_namespace/without_extensions/output.css
a {
  b: value;
}

<===>
================================================================================
<===> nested_global_variable/direct/input.scss
@use "other";

a {b: inspect(other.$member)}

<===> nested_global_variable/direct/other.scss
x {
  @if false {
    // Even though this assignment is deeply nested and never evaluated, it
    // creates a variable slot in the module that defaults to null. This ensures
    // that a module will always expose the same members regardless of how it's
    // evaluated.
    $member: value !global;
  }
}

<===> nested_global_variable/direct/output.css
a {
  b: null;
}

<===>
================================================================================
<===> nested_global_variable/through_import/input.scss
@use "used";

a {b: inspect(used.$member)}

<===> nested_global_variable/through_import/used.scss
@import "imported";

<===> nested_global_variable/through_import/imported.scss
x {
  @if false {
    // Even though this assignment is deeply nested and never evaluated, it
    // creates a variable slot in the module that defaults to null. This ensures
    // that a module will always expose the same members regardless of how it's
    // evaluated.
    $member: value !global;
  }
}

<===> nested_global_variable/through_import/output.css
a {
  b: null;
}
